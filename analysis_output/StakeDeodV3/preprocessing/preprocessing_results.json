{
  "variables": {
    "token": {
      "type": "state",
      "description": "The ERC20 token contract interface used for transferring tokens in and out of the contract. Set upon deployment.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Only set during deployment by the owner and cannot be changed by users.",
      "impact_on_token_flow": "Determines which token is staked, withdrawn, and transferred."
    },
    "stopped": {
      "type": "state",
      "description": "A boolean flag that controls whether withdrawals (and remove liquidity) are permitted.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Only the owner can change this state via removePauseCapability or pause/unpause functions.",
      "impact_on_token_flow": "If true, withdrawals are blocked; if false, token flow (withdrawals) may occur."
    },
    "iCheckStakeUser": {
      "type": "state",
      "description": "An external dependency (contract address) used to verify if a referrer has staked before awarding referral bonus.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Set in the constructor and adjustable only by the owner.",
      "impact_on_token_flow": "Affects referral bonus calculations which add to the total claimable token amount."
    },
    "users[_userAddress].referalEarning": {
      "type": "state",
      "description": "Accumulated referral bonus earned by a user recorded in their user staking info.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Influenced indirectly by staking actions \u2013 a user\u2019s sponsor receives bonus if referral conditions are met. While a user cannot directly adjust it, they can affect it by controlling their own or their referral\u2019s staking.",
      "impact_on_token_flow": "Increases the claimable token amount when a user withdraws tokens."
    },
    "stakeReferal": {
      "type": "state",
      "description": "A mapping holding additional referral bonuses calculated and added to a referrer\u2019s earnings.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Modified internally during stakeTokensV3 based on referral checks; users indirectly affect it by choosing referrers.",
      "impact_on_token_flow": "Contributes to the final amount available for withdrawal including referral earnings."
    },
    "depositInfo[*].depositAmount": {
      "type": "state (within struct)",
      "description": "The amount of tokens deposited by the user in each staking deposit.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "Directly specified by the user when calling stakeTokensV3; the user chooses how many tokens to stake.",
      "impact_on_token_flow": "Serves as the base amount from which future bonus accruals (via monthly release percentages) are calculated and affects how many tokens can be withdrawn."
    },
    "depositInfo[*].depositedTimestamp": {
      "type": "state (within struct)",
      "description": "The timestamp at which the deposit was made, used to calculate elapsed months.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Set automatically using block.timestamp during staking. Although users can initiate the staking transaction, miners have a slight ability to influence block timestamps.",
      "impact_on_token_flow": "Determines the number of months (and thus maturity) passed, affecting how many tokens become claimable over time."
    },
    "depositInfo[*].monthlyPercentage": {
      "type": "state (within struct)",
      "description": "The percentage (divided by 1000) that defines how many tokens are released per month; it is looked up via releasePercentageFromDays using the staking period selected.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Set via the admin-only function setReleasePercentageV3 and then assigned during staking. Users cannot adjust this value.",
      "impact_on_token_flow": "Directly affects the calculation of claimable tokens per month, thereby determining withdrawal amounts."
    },
    "depositInfo[*].timePeriodInDays": {
      "type": "state (within struct)",
      "description": "The staking period (in days) chosen by the user at the time of staking.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "Directly provided by the user when calling stakeTokensV3.",
      "impact_on_token_flow": "Determines the maturity threshold (in months) used in withdrawal calculations (i.e. when full deposit plus bonuses become available)."
    },
    "withdrawnAmount": {
      "type": "state (mapping)",
      "description": "The cumulative amount that a user has already withdrawn, used to subtract from the total claimable amount.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Updated only by the contract during withdrawals; users cannot modify this externally.",
      "impact_on_token_flow": "Prevents users from withdrawing more tokens than they are entitled to by reducing available claimable tokens."
    },
    "getReferalBonusFromDays": {
      "type": "state (mapping)",
      "description": "Admin-defined mapping that sets the referral bonus percentage for different staking periods.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Only modified via the admin-only function setReferalPercentageFromDaysV3.",
      "impact_on_token_flow": "Determines the bonus referral amount added to claimable tokens, affecting total withdrawal amounts."
    },
    "releasePercentageFromDays": {
      "type": "state (mapping)",
      "description": "Admin-defined mapping that determines the monthly release percentage based on the chosen staking period.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Only adjustable by the admin through setReleasePercentageV3.",
      "impact_on_token_flow": "Directly influences how many tokens become available each month during the staking maturation process."
    },
    "block.timestamp (used in availableAmountForClaim)": {
      "type": "global (local in calculation)",
      "description": "Current block timestamp used to compute the elapsed time since deposit.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Miners have limited ability to adjust block timestamps within protocol-allowed bounds.",
      "impact_on_token_flow": "Affects the calculation of how many months have passed, thereby influencing the amount of tokens determined as claimable."
    }
  },
  "dependencies": {
    "IERC20.safeTransfer": {
      "type": "function (from SafeERC20 library)",
      "description": "Performs a safe transfer of tokens ensuring that the token contract returns a successful response or reverts.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Relies on the external ERC20 token contract implementation; if the token\u2019s code is non-standard or faulty, transfers might not behave as expected.",
      "impact_on_token_flow": "Directly moves tokens out of the contract when a user withdraws, making it critical for correct token flow."
    },
    "IERC20.safeTransferFrom": {
      "type": "function (from SafeERC20 library)",
      "description": "Safely transfers tokens from the user to the contract during staking.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Depends on the ERC20 token\u2019s implementation and approval mechanism; if token logic is flawed, it might affect token deposits.",
      "impact_on_token_flow": "Critical for ensuring that tokens are properly received into the contract when users stake tokens."
    },
    "availableAmountForClaim": {
      "type": "function",
      "description": "Calculates the total tokens available for a user to claim based on deposits, elapsed time, monthly release percentages, referral earnings, and already withdrawn amounts.",
      "manipulation_difficulty": "hard",
      "manipulation_method": "The function logic is determined by multiple state variables (some user-controlled, some admin-controlled) and relies on block timestamps; a combination of staking multiple deposits or timing withdrawals might allow users to optimize outcomes, but direct manipulation is not trivial.",
      "impact_on_token_flow": "Determines the exact amount of tokens that will be transferred to the user on withdrawal."
    },
    "stakeTokensV3": {
      "type": "function",
      "description": "Handles user staking by transferring tokens from the user to the contract, recording deposit details, and calculating referral bonuses.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "Users control the amount staked and the chosen staking period, which directly impacts the deposit record. However, the referral bonus depends on admin-defined percentages and external user status.",
      "impact_on_token_flow": "Establishes the fundamental parameters (deposit amount, staking duration, bonus percentages) that later determine the withdrawal amounts."
    },
    "checkUserStakedStatus": {
      "type": "function",
      "description": "Verifies if a given referral address is a staker using the external ICheckStakeUser contract.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "While the call is external, the iCheckStakeUser contract is set by the owner. If that external dependency is compromised, referral bonus calculations could be affected.",
      "impact_on_token_flow": "Influences the addition of referral bonuses, thereby indirectly affecting the total claimable token amount."
    },
    "SafeMath library functions": {
      "type": "library",
      "description": "Provides arithmetic operations with overflow checks for calculations in the contract.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Compiled into the contract; not directly manipulable at runtime.",
      "impact_on_token_flow": "Ensures that numerical calculations (such as bonus distributions and monthly accruals) are safe and correct, preserving accurate token flow computations."
    },
    "Modifiers (whenNotPaused, pauseCapability, onlyAdmin, onlyOwner)": {
      "type": "modifier",
      "description": "Control access and operational state of token staking and withdrawal functions.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Their logic is built into the contract and only the owner/admin can trigger state changes (like pausing or unpausing).",
      "impact_on_token_flow": "Restrict or allow token transfers and staking actions based on the contract\u2019s operational state, contributing to secure token flow control."
    }
  }
}