{
  "token_flow_description": "When a user calls withdrawTokensV3, the contract computes the total tokens available for claim by summing the matured amounts from each of the user\u2019s deposits plus any referral earnings, then subtracting any amounts that have already been withdrawn. For each deposit, the available amount is determined by calculating the number of full 30\u2010day periods (months) elapsed since deposit (derived from block.timestamp and the deposit\u2019s depositedTimestamp) and multiplying that by a per\u2010month release amount (which is the deposit amount multiplied by a monthly percentage defined in the deposit). If the number of months reaches or exceeds the total staking period (in months), the full original deposit amount plus all monthly bonuses is considered available. Referral earnings stored in the users mapping and in the stakeReferal mapping are also added. Finally, the contract calls safeTransfer on the ERC20 token to send the computed available tokens back to the user and updates a withdrawnAmount mapping to record that transfer.",
  "variables": {
    "token": {
      "type": "state",
      "description": "The ERC20 token contract instance used for staking and withdrawal. Set in the constructor.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "It is set at deployment and cannot be modified by users.",
      "impact_on_token_flow": "Determines which token is being transferred; if altered, the wrong token could be moved."
    },
    "depositInfo[x].depositAmount": {
      "type": "state",
      "description": "The amount of tokens the user staked in each deposit. Provided as tokenAmount in stakeTokensV3.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "The user directly selects the staking amount when calling stakeTokensV3, affecting later withdrawal calculations.",
      "impact_on_token_flow": "Directly scales the available claimable tokens; higher deposits result in higher claim amounts."
    },
    "depositInfo[x].depositedTimestamp": {
      "type": "state",
      "description": "The block timestamp when the deposit was made, establishing the starting point for the staking period.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "While set automatically to block.timestamp during staking, miners can slightly influence this value within allowable limits.",
      "impact_on_token_flow": "A small manipulation could affect the number of elapsed 30\u2010day periods computed, thus slightly changing the available withdrawal amount."
    },
    "depositInfo[x].monthlyPercentage": {
      "type": "state",
      "description": "The per\u2010month release percentage (multiplied by 1/1000) determining the bonus amount released every month, assigned based on the staking period (_days).",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "It is set by admin using the setReleasePercentageV3 function and stored in a mapping.",
      "impact_on_token_flow": "Directly governs the bonus part of each deposit that is released over time."
    },
    "depositInfo[x].timePeriodInDays": {
      "type": "state",
      "description": "The staking period in days input by the user during staking.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "Users choose the staking duration when calling stakeTokensV3.",
      "impact_on_token_flow": "Determines the total number of months (staking duration in months) over which tokens fully mature; affects when full amounts become claimable."
    },
    "withdrawnAmount[_userAddress]": {
      "type": "state",
      "description": "Tracks the cumulative amount that has already been withdrawn by the user.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "This variable is exclusively updated by the withdrawTokensV3 function after successful transfers.",
      "impact_on_token_flow": "Subtracts from the computed available amount to prevent over-withdrawal."
    },
    "users[_userAddress].referalEarning": {
      "type": "state",
      "description": "Accumulates bonus tokens earned from referral activity as part of staking.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "Users indirectly influence this by providing a referee address and by participating in staking; the referral bonus is computed in stakeTokensV3 using provided values.",
      "impact_on_token_flow": "Increases the total token amount that becomes claimable via referral earnings."
    },
    "stakeReferal[_userAddress]": {
      "type": "state",
      "description": "Stores additional referral bonus values that are added to the user\u2019s referral earnings.",
      "manipulation_difficulty": "easy",
      "manipulation_method": "Users can indirectly affect this by being referrers in stakeTokensV3, where bonus amounts are computed from their referees\u2019 staked amounts.",
      "impact_on_token_flow": "Adds to the overall withdrawal amount as part of referral bonuses."
    },
    "getReferalBonusFromDays[_days]": {
      "type": "state",
      "description": "Mapping that holds the yearly referral bonus percentage based on the chosen staking duration.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Set only by an admin using setReferalPercentageFromDaysV3.",
      "impact_on_token_flow": "Determines the magnitude of referral bonus calculated during staking, hence affecting later withdrawals."
    },
    "block.timestamp": {
      "type": "global",
      "description": "The current blockchain time used to compute elapsed time since deposit for maturity calculations.",
      "manipulation_difficulty": "medium",
      "manipulation_method": "Miners can adjust it slightly within consensus rules, but ordinary users cannot directly control it.",
      "impact_on_token_flow": "Affects the computation of numberOfMonths and may slightly alter the computed available token amount."
    }
  },
  "dependencies": {
    "IERC20.safeTransfer": {
      "type": "function",
      "description": "Transfers tokens from the contract to the user's address in withdrawTokensV3, using the SafeERC20 wrapper.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "The function call is controlled by the contract logic and the token's own code; users cannot change its behavior.",
      "impact_on_token_flow": "Directly executes the token transfer of the computed available amount; any fault here would directly affect token movement."
    },
    "availableAmountForClaim": {
      "type": "function",
      "description": "Calculates the total amount of tokens a user is entitled to withdraw based on matured deposits and accumulated referral bonuses, then subtracts any previously withdrawn tokens.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "It is an internal view function whose logic is fixed in the contract; users can affect the inputs (via staking) but not its computation directly.",
      "impact_on_token_flow": "Determines the numerical value of tokens to be transferred in a withdrawal; any miscalculation directly changes token flow."
    },
    "SafeERC20 Library": {
      "type": "contract/library",
      "description": "Provides safe wrappers for ERC20 operations, ensuring that token transfers revert on failure.",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Widely audited and deployed by OpenZeppelin; not susceptible to manipulation by users.",
      "impact_on_token_flow": "Ensures that transfers follow a safe pattern, avoiding silent failures in token movement."
    },
    "SafeMath Library": {
      "type": "library",
      "description": "Provides arithmetic functions with overflow checks (though Solidity 0.8+ natively checks for overflow).",
      "manipulation_difficulty": "impossible",
      "manipulation_method": "Internal library that is part of the contract code; users cannot alter its behavior.",
      "impact_on_token_flow": "Ensures arithmetic operations are executed safely, protecting the token flow calculations from overflow errors."
    }
  }
}