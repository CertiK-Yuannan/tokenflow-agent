{
  "analysis_focus": "Iteration 5: Analysis of 5 variables and 5 dependencies",
  "code_representation": "Below is a pseudo\u2010code representation that follows the normal token\u2010flow execution path while highlighting how the specified variables and external dependency functions interact during staking and withdrawal. This pseudo\u2010code focuses only on the key steps and computations related to the variables and dependencies mentioned.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nMain Execution Flow:\n\nfunction stakeTokens(user, tokenAmount, referrer, stakingPeriodInDays):\n    \n    // 1. Update global deposit count and record new deposit details\n    depositCount = depositCount + 1\n\n    // 2. Set the user's referrer in their staking info record\n    users[user].referalEarning remains unchanged initially\n    users[user].referer = referrer\n\n    // 3. Check referral eligibility using external checkUserStakedStatus\n    (referrerHasStaked, stakeContract) = checkUserStakedStatus(referrer)\n    \n    if (userStakedStatus[referrer] is true AND (user != referrer)):\n        // Calculate bonus based on depositAmount and admin-controlled referral percentage\n        bonus = ( tokenAmount * getReferalBonusFromDays[stakingPeriodInDays] ) / 1000\n        // Increase the referrer\u2019s recorded bonus in the user struct\n        users[referrer].referalEarning = users[referrer].referalEarning + bonus\n\n    else if (referrerHasStaked is true AND (user != referrer)):\n        bonus = ( tokenAmount * getReferalBonusFromDays[stakingPeriodInDays] ) / 1000\n        // Alternatively, update the separate stakeReferal mapping\n        stakeReferal[referrer] = stakeReferal[referrer] + bonus\n\n    // 4. Mark the user as having staked tokens\n    userStakedStatus[user] = true\n\n    // 5. Compute the maturity timestamp by adding staking period (in days) to current block time\n    maturityTimestamp = currentTime + (stakingPeriodInDays * 1 day)\n\n    // 6. Update overall staked token totals\n    totalTokensStaked = totalTokensStaked + tokenAmount\n    userTotalTokenStaked[user] = userTotalTokenStaked[user] + tokenAmount\n\n    // 7. Create a new deposit record (struct)\n    depositRecord = {\n        depositId: depositCount,\n        userAddress: user,\n        depositAmount: tokenAmount,                     // user-controlled\n        monthlyPercentage: releasePercentageFromDays[stakingPeriodInDays], // admin-controlled percentage out of 1000\n        referalPercentage: getReferalBonusFromDays[stakingPeriodInDays],     // admin-controlled percentage\n        depositedTimestamp: currentTime,                // set from block.timestamp\n        maturityTimestamp: maturityTimestamp,\n        timePeriodInDays: stakingPeriodInDays           // user provided\n    }\n    \n    // 8. Store this deposit in a mapping with depositCount key\n    depositInfo[depositCount] = depositRecord\n    \n    // 9. Register the deposit id into the user's deposit list and count\n    userDepositIds[user].push(depositCount)\n    userDepositCounts[user] = userDepositCounts[user] + 1\n\n    // 10. Transfer tokens from the user into the contract using safeTransferFrom (dependency)\n    IERC20.safeTransferFrom(user, contractAddress, tokenAmount)\n    \n    // 11. Emit an event (stakeToken) with stake details.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nCalculating Claimable Tokens (availableAmountForClaim):\n\nfunction availableAmountForClaim(user):\n    totalAvailable = 0\n\n    // Loop over each deposit of the user\n    for each depositId in userDepositIds[user]:\n        deposit = depositInfo[depositId]\n        \n        // Calculate number of months passed since deposit using depositedTimestamp.\n        monthsElapsed = (currentTime - deposit.depositedTimestamp) / (30 days)\n        \n        // Calculate maturity threshold in months based on timePeriodInDays.\n        maturityMonths = deposit.timePeriodInDays / 30\n        \n        // Compute how many tokens are released per month for this deposit.\n        monthlyRelease = ( deposit.depositAmount * deposit.monthlyPercentage ) / 1000\n        \n        if monthsElapsed >= maturityMonths:\n            // If maturity is reached, full deposit and bonus become available.\n            availableFromDeposit = deposit.depositAmount + (maturityMonths * monthlyRelease)\n        else:\n            // Otherwise, release tokens gradually proportional to elapsed months.\n            availableFromDeposit = monthsElapsed * monthlyRelease\n        \n        // Sum up the available amounts from each deposit.\n        totalAvailable = totalAvailable + availableFromDeposit\n\n    // Include referral earnings from both users struct and stakeReferal mapping.\n    referralBonus = users[user].referalEarning + stakeReferal[user]\n    \n    // Subtract any funds already withdrawn.\n    claimableTotal = totalAvailable + referralBonus - withdrawnAmount[user]\n    \n    return claimableTotal\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nWithdrawing Tokens:\n\nfunction withdrawTokens(user):\n    // Only allow the account owner to call\n    require(caller == user)\n\n    // Calculate claimable amount using availableAmountForClaim dependency\n    claimAmount = availableAmountForClaim(user)\n    \n    // Transfer tokens out of the contract using safeTransfer (dependency)\n    IERC20.safeTransfer(user, claimAmount)\n    \n    // Update the withdrawn amount record for future withdrawals.\n    withdrawnAmount[user] = withdrawnAmount[user] + claimAmount\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nKey Dependency Usage:\n\n- IERC20.safeTransferFrom(user, contractAddress, tokenAmount):\n    \u2022 Called during stakeTokens.\n    \u2022 Safely moves tokens from user to contract keeping the deposit record intact.\n\n- IERC20.safeTransfer(user, claimAmount):\n    \u2022 Called during withdrawTokens.\n    \u2022 Ensures that the calculated claimable tokens (from deposits, time elapsed, and referral bonuses) are safely sent back to the user.\n\n- checkUserStakedStatus(referrer):\n    \u2022 An external call used during staking to validate referral bonus eligibility.\n    \u2022 Its result affects whether referral bonus is credited either directly in the user's staking record or in the separate stakeReferal mapping.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nOverall Interaction Explanation:\n\n\u2022 User initiates stakeTokens:\n    \u2013 The tokenAmount (depositInfo[*].depositAmount) is specified by the user.\n    \u2013 The depositedTimestamp is recorded as currentTime to later compute elapsed months.\n    \u2013 The staking period (depositInfo[*].timePeriodInDays) defines when the user is fully mature to claim deposit + bonus.\n    \u2013 Referral bonus calculations update either users[user].referalEarning or stakeReferal based on the external check of the referral status.\n    \u2013 Tokens are securely transferred into the contract via IERC20.safeTransferFrom.\n\n\u2022 When withdrawing:\n    \u2013 availableAmountForClaim loops through each deposit and uses depositedTimestamp and timePeriodInDays (with monthlyPercentage) to determine tokens vesting over time.\n    \u2013 The referral bonus is added to the total claimable amount.\n    \u2013 Finally, IERC20.safeTransfer is used to deliver tokens to the user and update the withdrawn counter, ensuring proper token flow.\n\nThis pseudo\u2011code captures the normal flow integrating the key state variables and dependency functions related to token management and referral bonus calculation.",
  "variables_analyzed": [
    "depositInfo[*].depositAmount",
    "users[_userAddress].referalEarning",
    "depositInfo[*].depositedTimestamp",
    "depositInfo[*].timePeriodInDays",
    "stakeReferal"
  ],
  "dependencies_analyzed": [
    "IERC20.safeTransfer",
    "IERC20.safeTransferFrom",
    "checkUserStakedStatus",
    "stakeTokensV3",
    "availableAmountForClaim"
  ],
  "iteration_info": {
    "iteration": 4,
    "new_variable_added": true,
    "new_dependency_added": true,
    "variables_count": 5,
    "dependencies_count": 5
  }
}